/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.4/samples
 * This project uses @Incubating APIs which are subject to change.
 */


/********
* PLUGINS
*********/

plugins {
    id "java"
    id "jacoco"
    id "checkstyle"
    id "com.github.spotbugs" version "5.0.6"
    id "com.github.kt3k.coveralls" version "2.12.0"
    id "application"
    id "eclipse"
    id 'idea'
}


/************
* SOURCE SETS
*************/

sourceSets {
      main {
         java {
            srcDir 'src/main/java'
         }
      }
      test {
         java {
            srcDir 'src/test/java'
         }
      }
}


/********************************
* APP PROPERTIES AND DEPENDENCIES
*********************************/

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    // JUnit 5
    testImplementation(platform('org.junit:junit-bom:5.8.2'))
	testImplementation('org.junit.jupiter:junit-jupiter')
}



/**************
* PLUGINS SETUP
***************/

/*
*   Checkstyle
*/
checkstyle {
	// Whether to allow the build to continue if there are warnings.
    // (default: ignoreFailures = false)
	ignoreFailures = true
	sourceSets = [sourceSets.main]
	toolVersion "8.8"
}

/*
*   Spotbugs
*/
spotbugs {
    ignoreFailures = true
}

/*
*   JaCoCo
*/
jacocoTestReport {
    // Show code coverage results
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    executionData(fileTree(project.rootDir.absolutePath).include("**/${buildDir}/jacoco/*.exec"))

    reports {
        xml.required = true
        csv.required = false
        xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        html.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport_html/")
    }
}

/*
*   Coveralls
*/
coveralls {
    jacocoReportPath 'build/reports/jacoco/test/jacocoTestReport.xml'
}

/*
*   Eclispe
*/
eclipse {
	project {
		name = 'wordle'
	}
}


/***********
* TASK SETUP
************/

spotbugsMain {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
        }
        xml {
            required = false
        }
    }
}

test {
    // Use JUnit 5
    useJUnitPlatform()

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
    
    finalizedBy jacocoTestReport
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'it.uniba.app/App'
    }
    archiveBaseName = project.name + '-all'
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
project.tasks.getByName('build').dependsOn fatJar


/***********************
* MAIN CLASS DECLARATION
************************/

mainClassName = 'it.uniba.app/App'
